// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagServiceClient is the client API for TagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagServiceClient interface {
	AddTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTag(ctx context.Context, in *Select, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Tags, error)
	AddTopic(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditTopic(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTopic(ctx context.Context, in *Select, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTopics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Topics, error)
	AddNews(ctx context.Context, in *News, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditNews(ctx context.Context, in *News, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNews(ctx context.Context, in *Select, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNewses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Newses, error)
}

type tagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagServiceClient(cc grpc.ClientConnInterface) TagServiceClient {
	return &tagServiceClient{cc}
}

func (c *tagServiceClient) AddTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/AddTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) EditTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/EditTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) DeleteTag(ctx context.Context, in *Select, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Tags, error) {
	out := new(Tags)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) AddTopic(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/AddTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) EditTopic(ctx context.Context, in *Topic, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/EditTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) DeleteTopic(ctx context.Context, in *Select, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/DeleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetTopics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Topics, error) {
	out := new(Topics)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/GetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) AddNews(ctx context.Context, in *News, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/AddNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) EditNews(ctx context.Context, in *News, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/EditNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) DeleteNews(ctx context.Context, in *Select, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/DeleteNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) GetNewses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Newses, error) {
	out := new(Newses)
	err := c.cc.Invoke(ctx, "/api.v1.TagService/GetNewses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServiceServer is the server API for TagService service.
// All implementations should embed UnimplementedTagServiceServer
// for forward compatibility
type TagServiceServer interface {
	AddTag(context.Context, *Tag) (*emptypb.Empty, error)
	EditTag(context.Context, *Tag) (*emptypb.Empty, error)
	DeleteTag(context.Context, *Select) (*emptypb.Empty, error)
	GetTags(context.Context, *emptypb.Empty) (*Tags, error)
	AddTopic(context.Context, *Topic) (*emptypb.Empty, error)
	EditTopic(context.Context, *Topic) (*emptypb.Empty, error)
	DeleteTopic(context.Context, *Select) (*emptypb.Empty, error)
	GetTopics(context.Context, *emptypb.Empty) (*Topics, error)
	AddNews(context.Context, *News) (*emptypb.Empty, error)
	EditNews(context.Context, *News) (*emptypb.Empty, error)
	DeleteNews(context.Context, *Select) (*emptypb.Empty, error)
	GetNewses(context.Context, *emptypb.Empty) (*Newses, error)
}

// UnimplementedTagServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTagServiceServer struct {
}

func (UnimplementedTagServiceServer) AddTag(context.Context, *Tag) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (UnimplementedTagServiceServer) EditTag(context.Context, *Tag) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTag not implemented")
}
func (UnimplementedTagServiceServer) DeleteTag(context.Context, *Select) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedTagServiceServer) GetTags(context.Context, *emptypb.Empty) (*Tags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedTagServiceServer) AddTopic(context.Context, *Topic) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTopic not implemented")
}
func (UnimplementedTagServiceServer) EditTopic(context.Context, *Topic) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTopic not implemented")
}
func (UnimplementedTagServiceServer) DeleteTopic(context.Context, *Select) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (UnimplementedTagServiceServer) GetTopics(context.Context, *emptypb.Empty) (*Topics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopics not implemented")
}
func (UnimplementedTagServiceServer) AddNews(context.Context, *News) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNews not implemented")
}
func (UnimplementedTagServiceServer) EditNews(context.Context, *News) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditNews not implemented")
}
func (UnimplementedTagServiceServer) DeleteNews(context.Context, *Select) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNews not implemented")
}
func (UnimplementedTagServiceServer) GetNewses(context.Context, *emptypb.Empty) (*Newses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewses not implemented")
}

// UnsafeTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServiceServer will
// result in compilation errors.
type UnsafeTagServiceServer interface {
	mustEmbedUnimplementedTagServiceServer()
}

func RegisterTagServiceServer(s grpc.ServiceRegistrar, srv TagServiceServer) {
	s.RegisterService(&TagService_ServiceDesc, srv)
}

func _TagService_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/AddTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).AddTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_EditTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).EditTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/EditTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).EditTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Select)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).DeleteTag(ctx, req.(*Select))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetTags(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_AddTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).AddTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/AddTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).AddTopic(ctx, req.(*Topic))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_EditTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).EditTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/EditTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).EditTopic(ctx, req.(*Topic))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Select)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/DeleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).DeleteTopic(ctx, req.(*Select))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetTopics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_AddNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(News)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).AddNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/AddNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).AddNews(ctx, req.(*News))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_EditNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(News)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).EditNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/EditNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).EditNews(ctx, req.(*News))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_DeleteNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Select)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).DeleteNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/DeleteNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).DeleteNews(ctx, req.(*Select))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_GetNewses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetNewses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.TagService/GetNewses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetNewses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TagService_ServiceDesc is the grpc.ServiceDesc for TagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.TagService",
	HandlerType: (*TagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTag",
			Handler:    _TagService_AddTag_Handler,
		},
		{
			MethodName: "EditTag",
			Handler:    _TagService_EditTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _TagService_DeleteTag_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _TagService_GetTags_Handler,
		},
		{
			MethodName: "AddTopic",
			Handler:    _TagService_AddTopic_Handler,
		},
		{
			MethodName: "EditTopic",
			Handler:    _TagService_EditTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _TagService_DeleteTopic_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _TagService_GetTopics_Handler,
		},
		{
			MethodName: "AddNews",
			Handler:    _TagService_AddNews_Handler,
		},
		{
			MethodName: "EditNews",
			Handler:    _TagService_EditNews_Handler,
		},
		{
			MethodName: "DeleteNews",
			Handler:    _TagService_DeleteNews_Handler,
		},
		{
			MethodName: "GetNewses",
			Handler:    _TagService_GetNewses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tag.proto",
}
